import{_ as n,c as i,a as e,o as a}from"./app-B-YceFtn.js";const l={};function t(p,s){return a(),i("div",null,s[0]||(s[0]=[e(`<h2 id="数据索引" tabindex="-1"><a class="header-anchor" href="#数据索引"><span>数据索引</span></a></h2><h3 id="数据结构的角度" tabindex="-1"><a class="header-anchor" href="#数据结构的角度"><span>数据结构的角度</span></a></h3><ul><li><strong>B+ 树索引</strong>：通过树形结构存储数据，适用于范围查询（如 <code>BETWEEN</code>）和精确查询（如 <code>=</code>），支持有序数据的快速查找、排序、聚合操作。是 <code>MySQL</code> 默认的索引类型，常用于 <code>InnoDB</code> 和 <code>MyISAM</code> 引擎。</li><li><strong>哈希索引</strong>：基于哈希表的结构，适用于等值查询（如 <code>=</code>），查询速度非常快，但不支持范围查询（如 <code>&gt;</code>、<code>&lt;</code>）。哈希索引不存储数据的顺序，常用于 <code>Memory</code> 引擎。</li><li><strong>倒排索引/全文索引</strong>：用于全文搜索，将全文分词，通过存储词与文档的映射，支持模糊匹配和关键字搜索。特别适合用于大文本字段，如 <code>TEXT</code> 类型的列，用于查找包含特定词语的记录。</li><li><strong>R- 树索引/多维空间树</strong>：专为多维空间数据（如地理坐标）设计，适用于空间查询（例如，计算地理位置的最近距离、区域查询等）。常用于存储和查询地理信息系统（GIS）中的空间数据。</li></ul><div class="hint-container important"><p class="hint-container-title">重要</p><p>补充：<code>B+</code> 树把所有的实际数据都存储在深度都一样的叶子节点上，而其他内部节点只存储索引，所有的叶子节点之间通过指针组成一个有序列表。</p><p>通常在 <code>B+</code> 树上有两个指针头，一个指向根节点，另一个指向关键字最小的叶子节点。</p><p>基于上述两个指针和链表，就可以支持范围查询和随机查询。</p><p>而一颗 <code>B+</code> 树的节点一般如下：</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">struct</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> InternalNode</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> keys</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">N</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">];</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 最多 N 个键/索引, 超出需修改树的结构(分裂操作)</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    Node</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> children</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">N </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">+</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">];</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 指向子节点的指针</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> key_count</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 关键字/实际内容</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果对应到数据库中，具体的分裂操作过程可以 <a href="https://blog.csdn.net/weixin_52622200/article/details/118530154" target="_blank" rel="noopener noreferrer">看这篇博文</a>，非常详细。</p></div><h3 id="是否聚蔟的角度" tabindex="-1"><a class="header-anchor" href="#是否聚蔟的角度"><span>是否聚蔟的角度</span></a></h3><ul><li><strong>聚簇索引</strong>：<code>InnoDB</code> 中主键索引就是聚簇索引，它基于主键排序存储，之所以叫聚簇索引是因为索引的叶子节点存储完整数据行数据。聚簇索引适合进行大范围查询和排序操作，因为叶子节点存储的是完整的数据行，可以方便地进行范围扫描和按顺序读取。</li><li><strong>非聚簇索引</strong>：<code>InnoDB</code> 中非主键索引的索引，之所以称之为非聚簇是因为这个索引的叶子节点仅保存索引字段和主键值。如果要查询完整的数据行中的数据，需要再从聚簇索引即主键索引中通过主键查询，一个表可以有多个非聚簇索引。</li></ul><div class="hint-container important"><p class="hint-container-title">重要</p><p>补充：在 <code>InnoDB</code> 里聚簇索引就是主键索引，非聚簇索引指的是非主键索引（辅助索引、二级索引），默认情况下它们都是 <code>B+</code> 树实现的。例如通过姓名仅查询 <code>id</code> 的话，直接利用姓名索引就能得到 <code>id</code> 数据。如果图方便直接用 <code>select *</code>，那就不得不通过 <code>id</code> 再去主键索引查找不需要的性别和地址，浪费资源，且可能伴随着很多随机 <code>I/O</code>。</p><p>而通过二级索引查找得到 <code>id</code> ，再去主键索引查询记录的这个过程叫回表，一般做回表的效率会更加高一些。</p></div><h3 id="索引性质的角度" tabindex="-1"><a class="header-anchor" href="#索引性质的角度"><span>索引性质的角度</span></a></h3><ul><li><strong>主键索引</strong>：表中的每一行数据都有唯一的主键。每个表只能有一个主键索引，且主键值不能为 <code>NULL</code>，<code>InnoDB</code> 中主键索引是聚簇索引结构实现的，其实指定主键就会自动生成。</li><li><strong>唯一索引</strong>：保证索引列中的值是唯一的，可以有效防止重复数据的插入。唯一索引允许 <code>NULL</code> 值，但一个列中可以有多个 <code>NULL</code>，其实指定唯一键就会自动生成。</li><li><strong>普通索引/二级索引/辅助索引</strong>：一般指非主键索引且非唯一索引，不要所有查询都用 <code>select *</code> ，因为如果本来只需要查询索引列数据的话，直接利用二级索引就能得到所要的数据。</li><li><strong>联合索引</strong>：由多个列组成的索引，适用于多列的查询条件，能够提高包含多个条件的查询的性能。联合索引中的列是按照指定顺序排列的。</li><li><strong>全文索引</strong>：用于全文搜索，支持对长文本字段（如 <code>TEXT</code> 类型）进行关键字查找，支持自然语言处理、模糊匹配等操作，适用于需要对文本内容进行复杂搜索的场景。不过可以考虑使用 <code>ES</code> 来替代。</li><li><strong>哈希索引</strong>：基于哈希表的结构，适用于等值查询（如 <code>=</code>），查询速度非常快，但不支持范围查询（如 <code>&gt;</code>、<code>&lt;</code>）。哈希索引不存储数据的顺序，常用于 <strong>Memory</strong> 引擎。</li><li><strong>空间索引</strong>：用于空间数据（如地图上的经纬度坐标等）查询，通常使用 <code>R-</code> 树结构，适合多维数据的查询，如区域查询和最近距离查询，主要用于 <code>MyISAM</code> 和 <code>InnoDB</code> 存储引擎中的地理信息数据。</li></ul><p>这里用一张表的创建过程来演示上述索引。</p><div class="language-mysql line-numbers-mode" data-highlighter="shiki" data-ext="mysql" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>CREATE TABLE \`users\` (</span></span>
<span class="line"><span>    \`id\` INT NOT NULL AUTO_INCREMENT,</span></span>
<span class="line"><span>    \`username\` VARCHAR(50) NOT NULL,</span></span>
<span class="line"><span>    \`password\` VARCHAR(50),</span></span>
<span class="line"><span>    \`email\` VARCHAR(50),</span></span>
<span class="line"><span>    \`content\` VARCHAR(50),</span></span>
<span class="line"><span>    \`location\` VARCHAR(50),</span></span>
<span class="line"><span>    PRIMARY KEY(id) -- 主键索引</span></span>
<span class="line"><span>);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-- 唯一索引</span></span>
<span class="line"><span>CREATE UNIQUE INDEX idx_username ON users(username);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-- 普通索引</span></span>
<span class="line"><span>CREATE INDEX idx_username ON users(username);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-- 联合索引</span></span>
<span class="line"><span>CREATE INDEX idx_username_email ON users(username, email);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-- 全文索引</span></span>
<span class="line"><span>CREATE FULLTEXT INDEX idx_content ON articles(content);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-- 哈希索引</span></span>
<span class="line"><span>CREATE INDEX idx_username_hash ON users(username) USING HASH;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-- 空间索引</span></span>
<span class="line"><span>CREATE SPATIAL INDEX idx_location ON places(location);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="存储引擎" tabindex="-1"><a class="header-anchor" href="#存储引擎"><span>存储引擎</span></a></h2><ul><li><p><strong>InnoDB</strong>：</p><ul><li><p>支持事务、行级锁、外键。</p></li><li><p>提供高并发性能，适用于高负载的 <code>OLTP</code> 应用。</p></li><li><p>数据以聚集索引的方式存储，提高检索效率。</p></li></ul></li><li><p><strong>MyISAM</strong>：</p><ul><li>不支持事务和外键，使用表级锁。</li></ul><ul><li><p>适合读取多、更新少的场景，如数据仓库。</p></li><li><p>具有较高的读性能和较快的表级锁定。</p></li></ul></li><li><p><strong>MEMORY</strong>：</p><ul><li><p>数据存储在内存中，速度快，但数据在服务器重启后丢失。</p></li><li><p>适用于临时数据存储或快速缓存。</p></li></ul></li><li><p><strong>NDB</strong>：</p><ul><li>支持高可用性和数据分布，适合大规模分布式应用。</li></ul><ul><li>提供行级锁和自动分区。</li></ul></li><li><p><strong>ARCHIVE</strong>：</p><ul><li><p>用于存储大量历史数据，支持高效的插入和压缩。</p></li><li><p>不支持索引，适合日志数据存储。</p></li></ul></li></ul><div class="hint-container important"><p class="hint-container-title">重要</p><p>补充：实际上我们仅需重点了解 <code>InnoDB</code> 和 <code>MyISAM</code> 即可，其它仅需有点印象即可，关于这两者的详细区别可以在这里看一下。</p></div><div class="hint-container important"><p class="hint-container-title">重要</p><p>补充：在 <code>MySQL 8.4</code> 版本中，实际上一共提供了 <code>10</code> 种不同的存储引擎，<a href="https://dev.mysql.com/doc/refman/8.4/en/storage-engines.html" target="_blank" rel="noopener noreferrer">有兴趣可以了解一下官方文档</a>。</p></div>`,15)]))}const c=n(l,[["render",t]]),o=JSON.parse('{"path":"/1.%E7%BC%96%E7%A0%81%E4%BF%AE%E5%85%BB/4.%E6%8C%81%E4%B9%85%E5%AD%98%E5%82%A8/mysql/xvc5u91c/","title":"","lang":"zh-CN","frontmatter":{"createTime":"2025/08/06 05:43:51","permalink":"/1.编码修养/4.持久存储/mysql/xvc5u91c/","description":"数据索引 数据结构的角度 B+ 树索引：通过树形结构存储数据，适用于范围查询（如 BETWEEN）和精确查询（如 =），支持有序数据的快速查找、排序、聚合操作。是 MySQL 默认的索引类型，常用于 InnoDB 和 MyISAM 引擎。 哈希索引：基于哈希表的结构，适用于等值查询（如 =），查询速度非常快，但不支持范围查询（如 >、<）。哈希索引不存...","head":[["meta",{"property":"og:url","content":"https://limou3434.github.io/work-blog-website/work-blog-website/1.%E7%BC%96%E7%A0%81%E4%BF%AE%E5%85%BB/4.%E6%8C%81%E4%B9%85%E5%AD%98%E5%82%A8/mysql/xvc5u91c/"}],["meta",{"property":"og:site_name","content":"缡墨"}],["meta",{"property":"og:description","content":"数据索引 数据结构的角度 B+ 树索引：通过树形结构存储数据，适用于范围查询（如 BETWEEN）和精确查询（如 =），支持有序数据的快速查找、排序、聚合操作。是 MySQL 默认的索引类型，常用于 InnoDB 和 MyISAM 引擎。 哈希索引：基于哈希表的结构，适用于等值查询（如 =），查询速度非常快，但不支持范围查询（如 >、<）。哈希索引不存..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-13T09:33:14.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-13T09:33:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-06-13T09:33:14.000Z\\",\\"author\\":[]}"]]},"headers":[],"readingTime":{"minutes":5.83,"words":1748},"git":{"updatedTime":1749807194000,"contributors":[{"name":"limou3434","username":"limou3434","email":"898738804@qq.com","commits":2,"avatar":"https://avatars.githubusercontent.com/limou3434?v=4","url":"https://github.com/limou3434"}]},"autoDesc":true,"filePathRelative":"notes/1.编码修养/4.持久存储/mysql/待补充内容.md","categoryList":[{"id":"4358b5","sort":10000,"name":"notes"},{"id":"557f7c","sort":1,"name":"编码修养"},{"id":"8ba8e4","sort":4,"name":"持久存储"},{"id":"56b8cc","sort":10001,"name":"mysql"}],"bulletin":true}');export{c as comp,o as data};
