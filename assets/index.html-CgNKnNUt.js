import{_ as e,c as o,a as r,o as n}from"./app-B-YceFtn.js";const s={};function c(p,t){return n(),o("div",null,t[0]||(t[0]=[r("<p>实际上没什么好说的，这里只是简单总结一下连接池原理，顺便梳理下一个用户注册和登录的过程，进一步带您理解一些业务逻辑。</p><p>预先设置好连接池内的正在等待的执行单元（进程/线程），每个执行单元保持和 <code>MySQL</code> 连接的状态，有任务（<code>SQL</code> 语句）到来就 <code>push</code> 进连接池中的执行流队列，我们完全可以自己手写一个连接池。</p><p>另外，网上还有一些 <code>MySQL</code> 连接池的组件，例如 <code>hicar</code>。</p><p>至于一个用户是怎么走注册和登录流程的呢？</p><p>用户端向服务器 <strong>请求注册页面</strong>（也就是请求访问一个网站，对应服务端的服务器必须搭建 <code>htpp</code>，类似 <code>Nginx</code>），用户端填写注册信息，服务端 <code>get post</code> 获取表单，服务器使用一些 <code>Web</code> 语言读取各个参数数据，经过后端检查和处理，提交到多个数据库中进行交互。</p><p>后端进程直接连接数据库有点过于直接（可能导致效率不高），因此就有了中间一层，也就是 <strong>中间件软件层</strong> 的概念。</p><p>使用一些更加效率更高的语言和数据库进行交互，交互的时候进行 <strong>负载均衡</strong>，多个数据库中可以进行同步，加强持久性，也就是 <strong>数据库集群化</strong>，可以将多个数据库作为一个数据库来处理（多数据库也是一些数据库不实现事务的原因之一，插入只在一台服务器插入，但是查询可以查其他同步过的数据）。</p><p>成功注册账户后，用户再次 <strong>请求登录页面</strong>，也是经过和上述类似的流程，就是处理逻辑有可能不太一样。</p><p>而如果查数据库时，查询的某个较为频繁热度的数据，此时就会有类似缓存的 <strong>NoSQL 存储系统</strong>（例如 <code>redis</code>），高频数据直接在里面查就行。</p><p>而关于整个结构的演进和效率，就可以去了解下 <strong>工程架构</strong> 和 <strong>容器技术</strong>（例如 <code>docker</code>）。</p>",10)]))}const i=e(s,[["render",c]]),d=JSON.parse('{"path":"/1.%E7%BC%96%E7%A0%81%E4%BF%AE%E5%85%BB/4.%E6%8C%81%E4%B9%85%E5%AD%98%E5%82%A8/mysql/jokhgv0j/","title":"","lang":"zh-CN","frontmatter":{"createTime":"2025/08/06 05:43:51","permalink":"/1.编码修养/4.持久存储/mysql/jokhgv0j/","description":"实际上没什么好说的，这里只是简单总结一下连接池原理，顺便梳理下一个用户注册和登录的过程，进一步带您理解一些业务逻辑。 预先设置好连接池内的正在等待的执行单元（进程/线程），每个执行单元保持和 MySQL 连接的状态，有任务（SQL 语句）到来就 push 进连接池中的执行流队列，我们完全可以自己手写一个连接池。 另外，网上还有一些 MySQL 连接池的...","head":[["meta",{"property":"og:url","content":"https://limou3434.github.io/work-blog-website/work-blog-website/1.%E7%BC%96%E7%A0%81%E4%BF%AE%E5%85%BB/4.%E6%8C%81%E4%B9%85%E5%AD%98%E5%82%A8/mysql/jokhgv0j/"}],["meta",{"property":"og:site_name","content":"缡墨"}],["meta",{"property":"og:description","content":"实际上没什么好说的，这里只是简单总结一下连接池原理，顺便梳理下一个用户注册和登录的过程，进一步带您理解一些业务逻辑。 预先设置好连接池内的正在等待的执行单元（进程/线程），每个执行单元保持和 MySQL 连接的状态，有任务（SQL 语句）到来就 push 进连接池中的执行流队列，我们完全可以自己手写一个连接池。 另外，网上还有一些 MySQL 连接池的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-13T09:33:14.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-13T09:33:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-06-13T09:33:14.000Z\\",\\"author\\":[]}"]]},"headers":[],"readingTime":{"minutes":1.92,"words":577},"git":{"updatedTime":1749807194000,"contributors":[{"name":"limou3434","username":"limou3434","email":"898738804@qq.com","commits":7,"avatar":"https://avatars.githubusercontent.com/limou3434?v=4","url":"https://github.com/limou3434"}]},"autoDesc":true,"filePathRelative":"notes/1.编码修养/4.持久存储/mysql/013_limou_2024_03_08_mysql_连接池原理和架构雏形.md","categoryList":[{"id":"4358b5","sort":10000,"name":"notes"},{"id":"557f7c","sort":1,"name":"编码修养"},{"id":"8ba8e4","sort":4,"name":"持久存储"},{"id":"56b8cc","sort":10001,"name":"mysql"}],"bulletin":true}');export{i as comp,d as data};
