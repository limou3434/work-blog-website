import{_ as t,c as e,a as o,o as c}from"./app-B-YceFtn.js";const r={};function a(h,d){return c(),e("div",null,d[0]||(d[0]=[o('<table><thead><tr><th>数值类型</th><th>字节</th><th>描述</th></tr></thead><tbody><tr><td><code>TINYINT[UNSIGNED]</code></td><td>1</td><td>很小的整数，默认有符号 <br> <code>[-128,127]/[0,255]</code></td></tr><tr><td><code>SMALLINT[UNSIGNED]</code></td><td>2</td><td>较小的整数，默认有符号 <br> <code>[-32768,32767]/[0,65535]</code></td></tr><tr><td><code>MEDIUMINT[UNSIGNED]</code></td><td>3</td><td>中等的整数，默认有符号 <br> <code>[-8388608,8388607]/[0,16777215]</code></td></tr><tr><td><code>INT[UNSIGNED]</code>/<code>INTEGER[UNSIGNED]</code></td><td>4</td><td>标准的整数，默认有符号 <br> <code>[-2147483648,2147483647]/[0,4294967295]</code></td></tr><tr><td><code>BIGINT[UNSIGNED]</code></td><td>8</td><td>较大的整数，默认有符号 <br> <code>[-9223372036854775808,9223372036854775807]/[0,18446744073709551615]</code></td></tr></tbody></table><p>如果插入了超出对应字段合法范围的数据，<code>MySQL</code> 就会拒绝插入的行为，因此在 <code>MySQL</code> 看来，所有能插入的数据都是合法的，因此数据类型实际上就是一种约束（我们以后再来好好理解这个词，现在先简单了解一下），倒逼程序员进行正确的操作，保证数据插入的合法性。</p><h1 id="_2-二进制类型" tabindex="-1"><a class="header-anchor" href="#_2-二进制类型"><span>2.二进制类型</span></a></h1><table><thead><tr><th>二进制类型</th><th>描述</th></tr></thead><tbody><tr><td><code>BIT(M)</code></td><td>位类型，<code>M</code> 为指定位数，默认值为 <code>1</code>，范围为 <code>[1-64]</code></td></tr><tr><td><code>TINYBLOB</code></td><td>很小的二进制数据</td></tr><tr><td><code>BLOB</code></td><td>二进制大对象</td></tr><tr><td><code>MEDIUMBLOB</code></td><td>中等大小的二进制数据</td></tr><tr><td><code>LONGBLOB</code></td><td>较大的二进制数据</td></tr></tbody></table><p><code>MySQL</code> 通常按照 <code>ASCII</code> 码值显示的，因此无法直接显示位类型的 <code>0/1</code> ，我们可以使用十进制来查看（例如 <code>select hex(bit_data) from table_name;</code>）。</p><p>而因此插入的一些二进制值达到 <code>ASCII</code> 的合法范围时，就会显示出对应的 <code>ASCII</code> 字符。</p><h1 id="_3-小数类型" tabindex="-1"><a class="header-anchor" href="#_3-小数类型"><span>3.小数类型</span></a></h1><table><thead><tr><th>小数类型</th><th>字节</th><th>描述</th></tr></thead><tbody><tr><td><code>FLOAT[(M,D)][UNSIGNED]</code></td><td>4</td><td>单精度浮点数，默认有符号，<code>M</code> 为显示长度，<code>D</code> 为小数位数/精度</td></tr><tr><td><code>DOUBLE[(M,D)][UNSIGNED]</code></td><td></td><td>双精度浮点数，默认有符号</td></tr><tr><td><code>DECIMAL(M,D)[UNSIGNED]</code></td><td></td><td>定点数，适用于存储精确的小数，默认有符号</td></tr></tbody></table><p>浮点类型如果规定了小数点的位数，则显示的长度里包含小数点规定的位数（但是不包含小数点），例如插入 <code>10.0</code> 会显示 <code>10.00</code>，插入 <code>100.1</code> 会插入失败（实际插入的是 <code>100.10</code>）。</p><p>但是如果插入多余的小数位，会发生四舍五入的存储，例如插入 <code>10.016</code>，实际插入的值是 <code>10.02</code>。</p><p>因此也无法插入 <code>99.996</code>，但是允许插入 <code>99.9900001</code>。</p><p>一般浮点数的数值很大，一般不会关心一个浮点数的大小，用户只需要根据自己的需求设置显示位数和精度即可。</p><p>浮点类型可能存在较大的数据缺失问题，而定点数类型则可以尽可能规避这个问题（如果希望精度更高就需要使用 <code>decimal</code> 类型）。</p><h1 id="_4-文本类型" tabindex="-1"><a class="header-anchor" href="#_4-文本类型"><span>4.文本类型</span></a></h1><table><thead><tr><th>文本类型</th><th>描述</th></tr></thead><tbody><tr><td><code>CHAR(L)</code></td><td>定长字符串，<code>L</code> 为存储长度，最大值为 <code>255</code>，单位是一个“字符”</td></tr><tr><td><code>VARCHAR(L)</code></td><td>变长字符串，<code>L</code> 的最大值为 <code>65535</code> 个“字节”，但是其中有 <code>1~3</code> 个字节需要记录数据大小，因此有效字节数为 <code>65532</code>。在 <code>utf8</code> 中也就是最多 <code>65532/3=21844</code> 个字符（<code>*3</code>），在 <code>gbk</code> 中也就是 <code>65532/2=32766</code>（也就是说，具体字符个数和所用编码密切相关）。</td></tr><tr><td><code>BINARY</code></td><td>定长二进制字符串</td></tr><tr><td><code>VARBINARY</code></td><td>变长二进制字符串</td></tr><tr><td><code>TINYTEXT</code></td><td>很小的文本数据</td></tr><tr><td><code>TEXT</code></td><td>普通的文本数据</td></tr><tr><td><code>MEDIUMTEXT</code></td><td>中等的文本数据</td></tr><tr><td><code>LONGTEXT</code></td><td>较大的文本数据</td></tr></tbody></table><p>不定长的字符串可以会影响查询效率，但是空间利用率较高。在使用 <code>varchar</code> 类型是，上限就是 <code>L</code>，是“有多少用多少，不超过 <code>L</code>”，而定长的字符串是“就算只有这么多，也会占用 <code>L</code>”，两者的区别类似 <code>C/C++</code> 的 <code>char s[size]</code> 和 <code>std::string str</code> 的区别。</p><p>另外需要注意一个汉字字符也是一个字符，这点很特殊，即使一个中文汉字用多个字节表示，也依旧可以使用 <code>char(1)</code> 来表示（但是需要注意有时候会报字符集不匹配的错误）。</p><blockquote><p>疑惑：关于 <code>VARCHAR(L)</code> 中的 <code>L</code> 是字符个数还是字节个数，貌似不同版本的 <code>MySQL</code> 是不一样的。</p></blockquote><h1 id="_5-时间类型" tabindex="-1"><a class="header-anchor" href="#_5-时间类型"><span>5.时间类型</span></a></h1><table><thead><tr><th>时间类型</th><th>字节</th><th>描述</th></tr></thead><tbody><tr><td><code>DATE</code></td><td>3</td><td>日期值，格式为 <code>yyyy-mm-dd</code>，对于时间精度只需要到天数时就使用该类型，需要程序员自己登记修改</td></tr><tr><td><code>DATETIME</code></td><td>8</td><td>日期和时间值，格式为 <code>yyyy-mm-dd HH:ii:ss</code>，需要程序员自己登记修改</td></tr><tr><td><code>TIMESTAMP</code></td><td>4</td><td>时间戳，格式和 <code>DATETIME</code> 一样，该字段会自动填入（若使用 <code>UPDATE table_name set field_name=&#39;new_value&#39;</code> 更新同一项的其他字段数据时，将会自动更新），因此时间戳经常被用于数据被更新的最近时间点，无需程序员自己登记修改</td></tr><tr><td><code>TIME</code></td><td></td><td>时间</td></tr><tr><td><code>YEAR</code></td><td></td><td>年份</td></tr></tbody></table><h1 id="_6-复合类型" tabindex="-1"><a class="header-anchor" href="#_6-复合类型"><span>6.复合类型</span></a></h1><table><thead><tr><th>复合类型</th><th>描述</th></tr></thead><tbody><tr><td><code>ENUM</code></td><td>枚举（单选）。只是设定若干选项，最终在单元格中只存储了一个实际值，枚举值的大小范围为 <code>[1,65535]</code>，使用方法和 <code>C/C++</code> 的枚举体类似，枚举字段的数据只允许填入之前枚举出的所有值。并且，如果插入的数字是合法范围的值，也会转为为对应的枚举标识（如果忽略该字段会自动填入 <code>NULL</code>，使用 <code>0</code> 作为插入会导致非法操作）</td></tr><tr><td><code>SET</code></td><td>集合（多选）。和枚举不同，一个列可以拥有多个值，多个值作为一个字段数据插入的时候，整体看作一个字符串即可。并且我们还可以使用数字来插入数据，该数字为 <code>0001</code> 代表四个元素中的第一个元素，若为 <code>0101</code> 则代表四个元素中的第一、第三个元素（如果忽略该字段会自动填入 <code>NULL</code>，使用 <code>0</code> 作为插入会导致为空）</td></tr></tbody></table><p>使用 <code>FIND_IN_SET(SUB, STR_LIST)</code> 可以来查找集合中是否有某“一个”元素，若 <code>sub</code> 这个单一元素在 <code>str_list(不要在逗号后面加空格)</code> 集合中则返回其下标，若不存在则返回 <code>0</code>。</p><p>而如果我们直接使用 <code>where field_name=&#39;new_value&#39;</code> 子句来查询集合时，采用的是严格匹配法，我们需要不严格匹配时，就需要使用上述 <code>find_in_set()</code> 的接口。</p><p>也就是使用 <code>SELECT * FROM table_name WHERE FIND_IN_SET(sub, STR_LIST)</code> 来查询，这样只要有一个元素存在于集合字段中，就可以被查询出来。</p><p>而如果希望包含多个元素，就需要使用 <code>AND</code> 来级联多个接口，也就是使用 <code>SELECT * FROM table_name WHERE FIND_IN_SET(sub_1, STR_LIST) AND FIND_IN_SET(sub_2, STR_LIST) AND ...</code></p><blockquote><p>补充：<code>NULL</code> 和 <code>(空)</code> 是两种东西。</p></blockquote><h1 id="_7-布尔类型" tabindex="-1"><a class="header-anchor" href="#_7-布尔类型"><span>7.布尔类型</span></a></h1><table><thead><tr><th>布尔类型</th><th>描述</th></tr></thead><tbody><tr><td><code>BOOL</code></td><td>使用 <code>0/1</code> 表示“真/假”</td></tr></tbody></table><p>使用起来较简单，略，待补充...</p>',30)]))}const p=t(r,[["render",a]]),s=JSON.parse('{"path":"/1.%E7%BC%96%E7%A0%81%E4%BF%AE%E5%85%BB/4.%E6%8C%81%E4%B9%85%E5%AD%98%E5%82%A8/mysql/ryr4mpqt/","title":"1.整型","lang":"zh-CN","frontmatter":{"createTime":"2025/08/06 05:43:51","permalink":"/1.编码修养/4.持久存储/mysql/ryr4mpqt/","title":"1.整型","description":"如果插入了超出对应字段合法范围的数据，MySQL 就会拒绝插入的行为，因此在 MySQL 看来，所有能插入的数据都是合法的，因此数据类型实际上就是一种约束（我们以后再来好好理解这个词，现在先简单了解一下），倒逼程序员进行正确的操作，保证数据插入的合法性。 2.二进制类型 MySQL 通常按照 ASCII 码值显示的，因此无法直接显示位类型的 0/1 ，...","head":[["meta",{"property":"og:url","content":"https://limou3434.github.io/work-blog-website/work-blog-website/1.%E7%BC%96%E7%A0%81%E4%BF%AE%E5%85%BB/4.%E6%8C%81%E4%B9%85%E5%AD%98%E5%82%A8/mysql/ryr4mpqt/"}],["meta",{"property":"og:site_name","content":"缡墨"}],["meta",{"property":"og:title","content":"1.整型"}],["meta",{"property":"og:description","content":"如果插入了超出对应字段合法范围的数据，MySQL 就会拒绝插入的行为，因此在 MySQL 看来，所有能插入的数据都是合法的，因此数据类型实际上就是一种约束（我们以后再来好好理解这个词，现在先简单了解一下），倒逼程序员进行正确的操作，保证数据插入的合法性。 2.二进制类型 MySQL 通常按照 ASCII 码值显示的，因此无法直接显示位类型的 0/1 ，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-13T09:33:14.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-13T09:33:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"1.整型\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-06-13T09:33:14.000Z\\",\\"author\\":[]}"]]},"headers":[],"readingTime":{"minutes":5.64,"words":1693},"git":{"updatedTime":1749807194000,"contributors":[{"name":"limou3434","username":"limou3434","email":"898738804@qq.com","commits":7,"avatar":"https://avatars.githubusercontent.com/limou3434?v=4","url":"https://github.com/limou3434"}]},"autoDesc":true,"filePathRelative":"notes/1.编码修养/4.持久存储/mysql/002_limou_2024_01_25_mysql_数据类型.md","categoryList":[{"id":"4358b5","sort":10000,"name":"notes"},{"id":"557f7c","sort":1,"name":"编码修养"},{"id":"8ba8e4","sort":4,"name":"持久存储"},{"id":"56b8cc","sort":10001,"name":"mysql"}],"bulletin":true}');export{p as comp,s as data};
